#!/usr/bin/env python


import sys
import os
from os.path import join
from os.path import exists
import shutil
import glob
import json
import subprocess
import dataclasses
import contextlib
import textwrap
import argparse

from typing import Generator


# =====
def _say(text: str) -> None:
    print(f"\033[33;1m----- {text}\033[0m", file=sys.stderr)


def _remove_exists(*paths: str) -> None:
    for path in paths:
        if exists(path):
            os.remove(path)


def _add_to_file(path: str, text: str) -> None:
    with open(path, "a") as file:
        file.write("\n" + text)


@contextlib.contextmanager
def _pushd(path: str) -> Generator[None, None, None]:
    old_path = os.getcwd()
    os.chdir(path)
    try:
        yield
    finally:
        os.chdir(old_path)


def _run(*cmd: str) -> None:
    subprocess.run(cmd, check=True)


# =====
@dataclasses.dataclass(frozen=True)
class _Pkg:
    names: set[str]
    version: str
    deps: set[str]
    keys: set[str]
    use_distcc: bool


def _read_pkgbuild(pkg_path: str) -> _Pkg:
    _say("Reading PKGBUILD ...")
    with _pushd(pkg_path):
        params: dict = json.loads(subprocess.check_output(r"""
            . ./PKGBUILD
            ; [ -z "$epoch" ] || epoch_prefix="$epoch:"
            ; echo "{
                \"names\": `echo \"${pkgname[*]}\" | jq -R .`
                , \"version\": `echo \"$epoch_prefix$pkgver-$pkgrel\" | jq -R .`
                , \"deps\": `echo \"${depends[*]} ${makedepends[*]} ${checkdepends[*]}\" | jq -R .`
                , \"keys\": `echo \"${validpgpkeys[*]}\" | jq -R .`
                , \"use_distcc\": `echo \"$_pikvm_use_distcc\" | jq -R .`
            }"
        """.replace("\n", " "), shell=True, executable="/bin/bash").decode())
    make_set = (lambda key: set(filter(None, map(str.strip, params[key].split()))))
    pkg = _Pkg(
        names=make_set("names"),
        version=params["version"].strip(),
        deps=make_set("deps"),
        keys=make_set("keys"),
        use_distcc=bool(int(params["use_distcc"].strip() or "0"))
    )
    assert pkg.names
    assert pkg.version
    _say(f"PKGBUILD: {pkg}")
    return pkg


def _append_repo(name: str, path: str) -> None:
    _say(f"Appending the local repository {name!r} in {path!r}")
    assert exists(join(path, name + ".db"))
    _add_to_file("/etc/pacman.conf", textwrap.dedent(f"""
        [{name}]
            Server = file://{path}
            SigLevel = Required DatabaseOptional
    """))


def _get_latest_version(repo_path: str, pkg_name: str) -> str:
    _say("Reading old version from the repo ...")
    path = join(repo_path, "latest", pkg_name)
    if exists(path):
        with open(path) as file:
            return file.read().strip()
    return ""


def _set_latest_version(repo_path: str, pkg_name: str, version: str) -> None:
    _say("Saving new version to the repo ...")
    path = join(repo_path, "latest")
    if not exists(path):
        os.mkdir(path)
    with open(join(path, pkg_name), "w") as file:
        file.write(version)


def _unset_latest_version(repo_path: str, pkg_name: str) -> None:
    _say("Unsetting current version in the repo ...")
    _remove_exists(join(repo_path, "latest", pkg_name))


def _prepare_build_dir(pkg_path: str, build_path: str) -> None:
    _say("Preparing the build directory ...")
    _run("find", build_path, "-mindepth", "1", "-delete")
    _run("cp", "-a", pkg_path + "/.", build_path)


def _install_deps(deps: set[str]) -> None:
    assert deps
    _say("Installing dependencies ...")
    # https://unix.stackexchange.com/questions/274727/how-to-force-pacman-to-answer-yes-to-all-questions
    # https://bugs.archlinux.org/task/48835
    _run("pacman", "--noconfirm", "--ask=4", "-Syu")

    ignored = [
        "python-setuptools",
    ]

    if deps:
        _run("pacman", "--noconfirm", "--ask=4", "--needed", "-S", *sorted(deps))
    else:
        _say("No dependencies to install.")

    # filtered_deps = {dep for dep in deps if not (dep.startswith("python"))}
    # python_packages = {dep for dep in deps if dep.startswith("python-")}
    
    # if python_packages:
    #     for package in sorted(python_packages):
    #         package_name = package.replace("python-", "")
    #         _say("Installing '" + package_name + "' package using pip")
    #         _run("pip", "install", package_name)

    # if filtered_deps:
    #     _run("pacman", "--noconfirm", "--ask=4", "--needed", "-S", *sorted(filtered_deps))
    # else:
    #     _say("No dependencies to install.")


def _sign_files(paths: set[str], key: str) -> None:
    for path in sorted(paths):
        _run(
            "sudo", "-u", "alarm",
            "gpg", "--verbose", "--pinentry-mode", "loopback",
            "--local-user", key, "--detach-sign", "--use-agent",
            "--no-autostart", path,
        )


def _test_sign(build_path: str, key: str) -> None:
    _say("Testing sign ...")
    test = ".testsign"
    test_sig = test + ".sig"
    with _pushd(build_path):
        _remove_exists(test, test_sig)
        with open(".testsign", "w") as file:
            file.write("test\n")
        _sign_files(set([test]), key)
        _remove_exists(test, test_sig)


def _build(build_path: str, key: str, distcc_hosts: str, no_extract: bool) -> None:
    _say("Building package ...")
    with _pushd(build_path):
        cmd = ["sudo", "-u", "alarm"]
        if distcc_hosts:
            cmd += ["env", f"DISTCC_HOSTS={distcc_hosts}", "pump"]
            _say("... With DISTCC-PUMP")

        # makepkg_cmd = "source /pikvm-env/bin/activate && makepkg"
        makepkg_cmd = "makepkg"

        if no_extract:
            makepkg_cmd += " --noextract --force"
            _say("... With NOEXTRACT")

        cmd += ["sh", "-c", makepkg_cmd]

        # if no_extract:
        #     cmd += ["--noextract", "--force"]
        #     _say("... With NOEXTRACT")

        _run(*cmd)
        if key:
            _say("Signing package(s) ...")
            _sign_files(set(sorted(glob.glob("*.pkg.tar.xz"))), key)


def _remove_from_repo(repo_path: str, pkg_name: str, version: str) -> None:
    with _pushd(repo_path):
        for pattern in [f"{pkg_name}-{version}-*.pkg.tar.xz*", f"{pkg_name}-*-{version}-*.pkg.tar.xz*"]:
            for name in glob.iglob(pattern):
                _say(f"Removing old {name} ...")
                os.remove(name)


def _copy_to_repo(build_path: str, repo_path: str) -> None:
    _say("Placing package(s) in the repo ...")
    with _pushd(build_path):
        for name in glob.iglob("*.pkg.tar.xz*"):
            shutil.copy(name, repo_path)


def _rebuild_repo(repo_name: str, repo_path: str) -> None:
    _say("Rebuilding the repo ...")
    with _pushd(repo_path):
        for name in glob.iglob(f"{repo_name}.*"):
            os.remove(name)
        names = sorted(glob.iglob("*.pkg.tar.xz"))
        _run("repo-add", f"{repo_name}.db.tar.gz", *names)


# =====
def main() -> None:  # pylint: disable=too-many-statements
    parser = argparse.ArgumentParser()
    parser.add_argument("--target-repo-name", default=os.getenv("TARGET_REPO_NAME"))
    parser.add_argument("--target-repo-key", default=os.getenv("TARGET_REPO_KEY"))
    parser.add_argument("--target-repo-dir", default=os.getenv("TARGET_REPO_DIR"))
    parser.add_argument("--build-dir", default=os.getenv("BUILD_DIR"))
    parser.add_argument("--packages-dir", default=os.getenv("PACKAGES_DIR"))
    parser.add_argument("--make-j", type=int, required=True)
    parser.add_argument("--force", action="store_true")
    parser.add_argument("--distcc-hosts", nargs="+")
    parser.add_argument("--distcc-make-j", type=int, default=0)
    parser.add_argument("--no-sign", action="store_true")
    parser.add_argument("--no-repo", action="store_true")
    parser.add_argument("--no-extract", action="store_true")
    parser.add_argument("pkg_name")
    o = parser.parse_args()  # pylint: disable=invalid-name
    o.distcc_make_j = (o.distcc_make_j or o.make_j)
    assert o.target_repo_name
    assert o.target_repo_key
    assert o.target_repo_dir
    assert o.build_dir
    assert o.packages_dir

    o.build_dir = join(o.build_dir, o.pkg_name)
    _run("sudo", "-u", "alarm", "mkdir", "-p", o.build_dir)

    pkg = _read_pkgbuild(join(o.packages_dir, o.pkg_name))
    old_version = _get_latest_version(o.target_repo_dir, o.pkg_name)

    if pkg.version != old_version:
        old = (old_version or "<none>")
        _say(f"Found new {o.pkg_name} ({old} -> {pkg.version})")
    elif o.force:
        _say(f"Forced rebuild of {o.pkg_name}")
    else:
        _say(f"Passed {o.pkg_name}")
        return

    distcc_hosts = ""
    if pkg.use_distcc and bool(o.distcc_hosts):
        distcc_hosts = " ".join(host + ",cpp,lzo" for host in o.distcc_hosts)
        _say(f"Using DISTCC-PUMP: {distcc_hosts} ...")
        _add_to_file("/etc/makepkg.conf", f"DISTCC_HOSTS=\"{distcc_hosts}\"")
        _add_to_file("/etc/makepkg.conf", "DISTCC_DIR=\"/distcc\"")
        _run("sed", "-i", "-e", "s/!distcc/distcc/g", "/etc/makepkg.conf")
        _run("sed", "-i", "-e", r"s/^ShutDown() {/ShutDown() {\nexit 0/g", "/usr/bin/pump")  # FIXME: pump hanging on exit
        _say(f"Using MAKE_J={o.distcc_make_j} (distcc)")
        _run("sed", "-i", "-e", f"s/^#MAKEFLAGS=.*/MAKEFLAGS=-j{o.distcc_make_j}/g", "/etc/makepkg.conf")
    else:
        _say(f"Using MAKE_J={o.make_j} (local)")
        _run("sed", "-i", "-e", f"s/^#MAKEFLAGS=.*/MAKEFLAGS=-j{o.make_j}/g", "/etc/makepkg.conf")

    if exists(join(o.target_repo_dir, o.target_repo_name + ".db")):
        _append_repo(o.target_repo_name, o.target_repo_dir)

    if not o.no_extract:
        _prepare_build_dir(join(o.packages_dir, o.pkg_name), o.build_dir)
    if not o.no_sign:
        _test_sign(o.build_dir, o.target_repo_key)
    if pkg.deps:
        _install_deps(pkg.deps)

    _build(
        build_path=o.build_dir,
        key=("" if o.no_sign else o.target_repo_key),
        distcc_hosts=distcc_hosts,
        no_extract=o.no_extract,
    )

    if not o.no_repo:
        if old_version:
            for name in pkg.names:
                _remove_from_repo(o.target_repo_dir, name, old_version)
            _unset_latest_version(o.target_repo_dir, o.pkg_name)
        _copy_to_repo(o.build_dir, o.target_repo_dir)
        _rebuild_repo(o.target_repo_name, o.target_repo_dir)
        _set_latest_version(o.target_repo_dir, o.pkg_name, pkg.version)
        with _pushd(o.target_repo_dir):
            _run("chown", "-R", "alarm:alarm", *sorted(os.listdir(".")))

    _say("Done!")


# =====
if __name__ == "__main__":
    main()
